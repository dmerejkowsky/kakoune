#!/bin/env python3

import argparse
import subprocess
import textwrap
import json
import sys

import cli_ui as ui
from path import Path


def print_line(line):
    for atom in line:
        print(atom["contents"])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--build-path",  required=True, type=Path)
    args = parser.parse_args()
    build_path = args.build_path
    kak_path = build_path  / "bin/kak"

    build(build_path)
    run_tests(kak_path)


def build(build_path):
    subprocess.run(["ninja"], cwd=build_path, check=True)


def run_tests(kak_path):
    kak_cmd = textwrap.dedent("""\
        try %{
          chai-eval-file @test_file@
        } catch %{
          edit err
          execute-keys -draft "<esc> i %val{error} <esc>"
          write
          quit!
        }
        write-quit
    """)
    all_ok = True
    for test_file in sorted(Path(".").files("*.test.chai")):
        ui.info_1(test_file)
        out_path = Path("out")
        out_path.write_text("")
        err_path = Path("err")
        err_path.write_text("")

        expected_path  = Path(test_file.name.split(".")[0] + ".out")
        expected = expected_path.text()
        cmd_for_test = kak_cmd.replace("@test_file@", test_file)
        process = subprocess.Popen(
            [kak_path, "-e", cmd_for_test, "-n", "-ui", "json", out_path],
            stdout=subprocess.PIPE,
            text=True
        )
        for line in process.stdout:
            rpc = json.loads(line)
            method = rpc["method"]
            params = rpc["params"]
            if method == "draw_status":
                status_line, mode_line, default_face = params
                print_line(status_line)
            elif method  in ["draw", "refresh", "set_cursor", "set_ui_options"]:
                pass
            else:
                ui.info(ui.tabs(1), method, *params)

        error = err_path.text()
        if error:
             ui.error(error.strip())
             all_ok = False
             continue

        actual = out_path.text()
        if actual != expected:
            ui.error(f"{repr(actual)} != {repr(expected)}")
            all_ok = False

    if not all_ok:
        sys.exit(2)


if __name__ == "__main__":
    main()
