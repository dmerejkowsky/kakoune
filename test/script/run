#!/usr/bin/env python3

import argparse
import subprocess
import textwrap
import json
import sys

import cli_ui as ui
from path import Path


def print_line(line):
    for atom in line:
        print(atom["contents"])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--build-path",  required=True, type=Path)
    parser.add_argument("-m", "--matching")
    args = parser.parse_args()
    matching = args.matching
    build_path = args.build_path
    kak_path = build_path  / "bin/kak"

    build(build_path)
    run_tests(kak_path, matching)


def build(build_path):
    subprocess.run(["ninja"], cwd=build_path, check=True)


def run_tests(kak_path, matching):
    this_path = Path(__file__).parent
    num_tests = 0
    num_fails = 0
    for test_file in sorted(this_path.files("*.test.chai")):
        if matching and matching not in test_file.name:
            continue
        num_tests += 1
        ui.info(ui.green, test_file.name.replace(".test.chai", ""))
        cmd_for_test = f"chai-eval-file run.chai {test_file}"
        process = subprocess.Popen(
            [kak_path, "-e", cmd_for_test, "-n", "-ui", "json"],
            stdout=subprocess.PIPE,
            text=True
        )
        for line in process.stdout:
            rpc = json.loads(line)
            method = rpc["method"]
            params = rpc["params"]
            if method == "draw_status":
                status_line, mode_line, default_face = params
                print_line(status_line)
            elif method  in ["draw", "refresh", "set_cursor", "set_ui_options"]:
                pass
            else:
                ui.info(ui.tabs(1), method, *params)

        retcode = process.wait()
        if retcode != 0:
             num_fails += 1

    ui.info()
    ui.info("Ran", num_tests, "tests")
    if num_fails > 0:
        ui.fatal(num_fails, "failures")
    ui.info(ui.check)



if __name__ == "__main__":
    main()
